package org.drools.planner.examples.tournaments;

import org.drools.planner.core.score.calculator.HardAndSoftConstraintScoreCalculator;
import org.drools.planner.examples.tournaments.model.Match;
import org.drools.planner.examples.tournaments.model.Team;

global HardAndSoftConstraintScoreCalculator scoreCalculator;

declare Overhead
    num: Integer
end

declare MinimumDistanceBroken
end

rule "Find out how many minimal distances between matches have been broken"
    when
        $m1: Match()
        Match(this != $m1, this.isMinimalDistanceBroken($m1), this.areTeamsShared($m1))
    then
        insertLogical(
            new MinimumDistanceBroken()
        );
end

rule "Find out how many matches share a single slot"
    when
        $m1: Match()
        Match(this != $m1, slot == $m1.slot)
    then
        insertLogical(
            new MinimumDistanceBroken()
        );
end

rule "Get overhead per team"
    when
        $t: Team()
        accumulate(
            Match($num: this.slot.number, teams contains $t),
            $min: min($num),
            $max: max($num),
            $count: count($num)
        )
    then
        // the "1" means that we tolerate overhead in range from 0 to 1.
        insertLogical(
            new Overhead($max.intValue() - $min.intValue() - (($count.intValue() * 2) - 1))
        );
end

rule "Hard score means how many teams have matches directly adjacent"
    when
        $total : Number () from accumulate(
            MinimumDistanceBroken(),
            count()
        )
    then
        scoreCalculator.setHardConstraintsBroken($total.intValue());
end

rule "Soft score is a sum of all the overheads"
    when
        $total : Number () from accumulate(
            Overhead($num: num, num > 0),
            sum($num)
        )
    then
        scoreCalculator.setSoftConstraintsBroken($total.intValue());
end